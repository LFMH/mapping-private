Index: include/pcl_visualization/point_cloud_handlers.h
===================================================================
--- include/pcl_visualization/point_cloud_handlers.h	(revision 34915)
+++ include/pcl_visualization/point_cloud_handlers.h	(working copy)
@@ -505,6 +505,7 @@
       /** \brief Obtain the actual color for the input dataset as vtk scalars.
         * \param scalars the resultant scalars containing the color for the input dataset
         */
+  public:
       virtual void getColor (vtkSmartPointer<vtkDataArray> &scalars) const;
 
     private:
Index: src/tools/pcd_viewer.cpp
===================================================================
--- src/tools/pcd_viewer.cpp	(revision 34915)
+++ src/tools/pcd_viewer.cpp	(working copy)
@@ -158,6 +158,10 @@
   double pc_scale = PC_SCALE;
   terminal_tools::parse_argument (argc, argv, "-pc_scale", pc_scale);
 
+  //Foreground Priority Color
+  bool fpc;
+  terminal_tools::parse_argument (argc, argv, "-fpc", fpc);
+  
   // Parse the command line arguments for .pcd files
   std::vector<int> p_file_indices;
   p_file_indices = terminal_tools::parse_file_extension_argument (argc, argv, ".pcd");
@@ -272,6 +276,8 @@
       else
         color_handler.reset (new pcl_visualization::PointCloudColorHandlerRandom<sensor_msgs::PointCloud2> (cloud));
     }
+    else if (fpc)
+      color_handler.reset (new pcl_visualization::PointCloudColorHandlerRGBField<sensor_msgs::PointCloud2> (cloud));
     else
       color_handler.reset (new pcl_visualization::PointCloudColorHandlerRandom<sensor_msgs::PointCloud2> (cloud));
 
