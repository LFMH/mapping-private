<launch>

  <!-- When not running on the robot -->
  <!-- Use simulation time -->

  <!-- <rosparam> -->
  <!--   use_sim_time: true -->
  <!-- </rosparam> -->

  <!-- URDF Model of Environment -->

  <group ns="ias_kitchen">
    <param name="kitchen_description" command="$(find xacro)/xacro.py '$(find ias_kitchen_defs)/kitchen/ias_kitchen.urdf.xml'"/>

    <node pkg="tf" type="static_transform_publisher" name="kitchen_link_broadcaster" args="1.4 2.8 0 3.21 0 0 /map /ias_kitchen/kitchen_link 100"/>

    <node pkg="robot_state_chain_publisher" type="state_chain_publisher" name="kitchen_state_publisher" output="screen">
      <param name="publish_frequency" value="2"/>
      <param name="tf_prefix" value="ias_kitchen"/>
      <remap from="robot_description" to="kitchen_description" />
    </node>
  </group>

  <!-- Convert PointCloud to PointCloud2 -->

  <node pkg="point_cloud_converter" type="point_cloud_converter" name="convert_cloud" output="screen">
    <remap from="/points_in" to="/shoulder_cloud" />
    <remap from="/points2_out" to="/cloud_pcd" />
    <remap from="/points2_in" to="/urdf_cloud_filter/output" />
    <remap from="/points_out" to="/urdf_cloud_filter_dummy" />
  </node>

  <!-- PCL Manager -->

  <node pkg="nodelet" type="nodelet" name="dos_pcl_manager" args="manager" output="screen" />

  <!-- URDF Cloud Filter -->

  <node pkg="nodelet" type="nodelet" name="urdf_cloud_filter" args="standalone dos_pcl_ros/URDFCloudFilter" output="screen">
    <remap from="~input" to="/cloud_pcd" />
    <rosparam>
      wait_for_tf: 1.0
      tf_prefix: /ias_kitchen
      model_description: /ias_kitchen/kitchen_description
      approximate_sync: true
      threshold: 0.02
      stop_link: kitchen_link
      relevant_rois:

        # We specify first what points we want to delete #
        - {regex: "counter_top_(.*)_link",
           operation: "delete"}

        # Segment objects on the COUNTERS #
        - {regex: "counter_top_(.*)_link",
           operation: "segment_objects",
           publish: "objects_on_$1_counter",
           search_expand_axis: [0.0, 0.0, 1.0],
           search_expand_distance: 1.0}

        # Segment objects on the SHELVES #
        - {regex: "shelf_(.*)_link",
           operation: "segment_objects",
           publish: "objects_on_$1_shelf",
           search_expand_axis: [0.0, 0.0, 1.0],
           search_expand_distance: 0.200}

        # We specify first what points we want to delete #
        - {regex: "rack_(.*)_link",
           operation: "delete"}

        # Segment objects on the RACKS #
        - {regex: "rack_(.*)_link",
           operation: "segment_objects",
           publish: "objects_on_$1_rack",
           search_expand_axis: [0.0, 0.0, 1.0],
           search_expand_distance: 0.400}

        - {regex: "(wall|counter_side).*",
           operation: "delete"}
    </rosparam>
  </node>

  <!-- When not running on the robot -->
  <!-- Specify an input .bag file -->

  <!-- Clustering of Objects on Racks -->

  <node pkg="shopping_demo" type="cluster_objects_on_racks" name="cluster_objects_on_racks" output="screen">
    <remap from="/cluster_objects_on_racks/input" to="/urdf_cloud_filter/objects_on_middle_rack" />
    <remap from="/cluster_objects_on_racks/output" to="/cluster_objects_on_racks/clusters" />
  </node>

</launch>
